'use strict';

var Runtime = require('../runtime');

var demoProgs = {
  prog0: require('./progs/prog0'),
  prog1: require('./progs/prog1'),
};

var initialDateNow = Date.now();
var runtime;
var rootLexEnv;
var finalOutput;
var timeoutID;
var currentDeactivator;

function getMasterTime() {
  return 0.001*(Date.now() - initialDateNow);
}

// "run" the runtime as necessary
function tryRunning() {
  if (!runtime.isRunnable()) {
    return;
  }

  var t = getMasterTime();
  var nextTime = runtime.runToTime(t);
  // console.log(t, nextTime);
  console.log('output is now', runtime.getSlotValue(finalOutput));

  if (nextTime && !timeoutID) {
    timeoutID = window.setTimeout(function() {
      timeoutID = null;
      tryRunning();
    }, 1000*(nextTime-t));
  }
}

document.addEventListener('mousemove', function(e) {
  var t = getMasterTime();
  var mouseX = e.clientX||e.pageX;
  var mouseY = e.clientY||e.pageY;
  // console.log('mouse', t, mouseX, mouseY);
  runtime.setSlotValue(rootLexEnv.mouseX, mouseX, t);
  runtime.setSlotValue(rootLexEnv.mouseY, mouseY, t);

  tryRunning();
}, false);

function startDemoProg(prog) {
  if (currentDeactivator) {
    // deactivate current running program
    currentDeactivator();

    // remove any timeout that's set
    if (timeoutID) {
      window.clearTimeout(timeoutID);
      timeoutID = null;
    }

    // begin sanity checking

    // make sure its not runnable
    if (runtime.isRunnable()) {
      throw new Error('something went wrong');
    }

    // make sure there are no triggers on global slots
    for (var k in rootLexEnv) {
      if (rootLexEnv[k].triggers.length > 0) {
        throw new Error('something went wrong');
      }
    }

    // end sanity checking
  }

  runtime = new Runtime();

  rootLexEnv = runtime.createLexEnv({
    add: runtime.createSlot(),
    delay1: runtime.createSlot(),
    mouseX: runtime.createSlot(),
    mouseY: runtime.createSlot(),
  });

  runtime.setSlotValue(rootLexEnv.add, runtime.primitives.add, 0);
  runtime.setSlotValue(rootLexEnv.delay1, runtime.primitives.delay1, 0);
  runtime.setSlotValue(rootLexEnv.mouseX, 0, 0);
  runtime.setSlotValue(rootLexEnv.mouseY, 0, 0);

  finalOutput = runtime.createSlot()

  // assume main activator definition has been generated by compiler
  currentDeactivator = prog.main(runtime, 0, [], finalOutput, '', rootLexEnv);

  console.log('initial output is', runtime.getSlotValue(finalOutput));

  tryRunning();
}

startDemoProg(demoProgs.prog0);

document.addEventListener('click', function(e) {
  startDemoProg(demoProgs.prog1);
}, false);
