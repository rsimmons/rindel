'use strict';

var Runtime = require('../runtime');

var runtime = new Runtime();

var add = runtime.createSlot();
runtime.setSlotValue(add, runtime.primitives.add, 0);
var delay1 = runtime.createSlot();
runtime.setSlotValue(delay1, runtime.primitives.delay1, 0);
var inputA = runtime.createSlot();
runtime.setSlotValue(inputA, 0, 0);
var inputB = runtime.createSlot();
runtime.setSlotValue(inputB, 0, 0);

var lexEnv = runtime.createLexEnv({
  add: add,
  delay1: delay1,
  inputA: inputA,
  inputB: inputB,
});

var finalOutput = runtime.createSlot();

var initialDateNow = Date.now();

function getMasterTime() {
  return 0.001*(Date.now() - initialDateNow);
}

var timeoutID;

// "run" the runtime as necessary
function run() {
  var t = getMasterTime();
  var nextTime = runtime.runToTime(t);
  // console.log(t, nextTime);
  console.log('output is now', runtime.getSlotValue(finalOutput));

  if (nextTime && !timeoutID) {
    timeoutID = window.setTimeout(function() {
      timeoutID = null;
      run();
    }, 1000*(nextTime-t));
  }
}

document.addEventListener('mousemove', function(e) {
  var t = getMasterTime();
  var mouseX = e.clientX||e.pageX;
  var mouseY = e.clientY||e.pageY;
  // console.log('mouse', t, mouseX, mouseY);
  runtime.setSlotValue(inputA, mouseX, t);
  // runtime.setSlotValue(inputB, mouseY, t);

  run();
}, false);

/*
function main(runtime, startTime, argSlots, outputSlot, baseTopoOrder, lexEnv) {
  if (argSlots.length !== 0) {
    throw new Error('called with wrong number of arguments');
  }

  // add application for final output (slot already created)
  var $_unappOut = runtime.addApplication(startTime, lexEnv.add, [lexEnv.inputA, lexEnv.inputB], outputSlot, baseTopoOrder+'1');

  // create and return deactivator closure. it needs to undo any applications
  return function() {
    $_unappOut();
  };
}
*/

function main(runtime, startTime, argSlots, outputSlot, baseTopoOrder, lexEnv) {
  if (argSlots.length !== 0) {
    throw new Error('called with wrong number of arguments');
  }

  // add application for final output (slot already created)
  var $_unappOut = runtime.addApplication(startTime, lexEnv.delay1, [lexEnv.inputA], outputSlot, baseTopoOrder+'1');

  // create and return deactivator closure. it needs to undo any applications
  return function() {
    $_unappOut();
  };
}

// assume main activator definition has been generated by compiler
main(runtime, 0, [], finalOutput, '', lexEnv);

console.log('initial output is', runtime.getSlotValue(finalOutput));
