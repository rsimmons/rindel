'use strict';

var Runtime = require('../runtime');

var demoProgs = {
  'same position': require('./progs/prog0'),
  'delayed position': require('./progs/prog1'),
};

var initialDateNow = Date.now();
var runtime;
var rootLexEnv;
var timeoutID;
var currentDeactivator;
var inputValues = {
  mouseX: 0,
  mouseY: 0,
}

function getMasterTime() {
  return 0.001*(Date.now() - initialDateNow);
}

// "run" the runtime as necessary
function tryRunning() {
  if (!runtime.isRunnable()) {
    return;
  }

  var t = getMasterTime();
  var nextTime = runtime.runToTime(t);

  if (nextTime && !timeoutID) {
    timeoutID = window.setTimeout(function() {
      timeoutID = null;
      tryRunning();
    }, 1000*(nextTime-t));
  }
}

document.addEventListener('mousemove', function(e) {
  var t = getMasterTime();
  inputValues.mouseX = e.clientX||e.pageX;
  inputValues.mouseY = e.clientY||e.pageY;
  // console.log('mouse', t, mouseX, mouseY);
  runtime.setSlotValue(rootLexEnv.mouseX, inputValues.mouseX, t);
  runtime.setSlotValue(rootLexEnv.mouseY, inputValues.mouseY, t);
  runtime.setSlotValue(rootLexEnv.mousePos, {x: inputValues.mouseX, y: inputValues.mouseY}, t);

  tryRunning();
}, false);

function visualizeOutput(value) {
  console.log('output is', value);

  var squareElem = document.getElementById('square');
  squareElem.style.left = (value - 17) + 'px';
  squareElem.style.top = '100px';
  // squareElem.style.left = (value.x - 17) + 'px';
  // squareElem.style.top = (value.y - 17) + 'px';
}

function startDemoProg(prog) {
  if (currentDeactivator) {
    // deactivate current running program
    currentDeactivator();

    // remove any timeout that's set
    if (timeoutID) {
      window.clearTimeout(timeoutID);
      timeoutID = null;
    }

    // begin sanity checking

    // make sure its not runnable
    if (runtime.isRunnable()) {
      throw new Error('something went wrong');
    }

    // make sure there are no triggers on global slots
    for (var k in rootLexEnv) {
      if (rootLexEnv[k].triggers.length > 0) {
        throw new Error('something went wrong');
      }
    }

    // end sanity checking
  }

  runtime = new Runtime();

  rootLexEnv = runtime.createLexEnv({
    add: runtime.createSlot(),
    delay1: runtime.createSlot(),
    mouseX: runtime.createSlot(),
    mouseY: runtime.createSlot(),
    mousePos: runtime.createSlot(),
  });

  runtime.setSlotValue(rootLexEnv.add, runtime.primitives.add, 0);
  runtime.setSlotValue(rootLexEnv.delay1, runtime.primitives.delay1, 0);
  runtime.setSlotValue(rootLexEnv.mouseX, inputValues.mouseX, 0);
  runtime.setSlotValue(rootLexEnv.mouseY, inputValues.mouseY, 0);
  runtime.setSlotValue(rootLexEnv.mousePos, {x: inputValues.mouseX, y: inputValues.mouseY}, 0);

  document.getElementById('code-column-code').textContent = prog.code;

  // assume main activator definition has been generated by compiler
  var result = prog.main(runtime, 0, [], '', rootLexEnv);
  console.log('activated main');
  visualizeOutput(result.outputSlot.value);
  currentDeactivator = result.deactivator;

  runtime.addTrigger(result.outputSlot, function(atTime) {
    visualizeOutput(result.outputSlot.value);
  });

  tryRunning();
}

function createDemoControls() {
  var demosListElem = document.getElementById('demos-list');

  for (var name in demoProgs) {
    var li = document.createElement('LI');
    li.setAttribute('class', 'demo-choice');
    li.appendChild(document.createTextNode(name));
    demosListElem.appendChild(li);

/*
    var ce = document.createElement('CODE');
    ce.className = 'language-javascript';
    var extractedCode = /\/\/SHOWBEGIN([^]*)\/\/SHOWEND/gm.exec(demos[name].code)[1].trim();
    ce.appendChild(document.createTextNode(extractedCode));

    var pe = document.createElement('PRE');
    pe.className = 'code-wrapper';
    pe.style.display = 'none';
    pe.appendChild(ce);

    codeColumnElem.appendChild(pe);

    demos[k].preElem = pe;
*/
  }
  demosListElem.firstChild.classList.add('demo-active');

  document.addEventListener('click', function(e) {
    if (e.target.classList.contains('demo-choice')) {
      // update UI
      for (var i = 0; i < demosListElem.childNodes.length; i++) {
        demosListElem.childNodes[i].classList.remove('demo-active');
      }
      e.target.classList.add('demo-active');

      // run program
      var name = e.target.textContent;
      var prog = demoProgs[name];
      startDemoProg(prog);
    }
  }, false);
}

document.addEventListener('DOMContentLoaded', function() {
  createDemoControls();

  startDemoProg(demoProgs['same position']);
});
